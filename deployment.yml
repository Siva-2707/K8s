apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-volume
spec:
  storageClassName: standard
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  csi:
    driver: pd.csi.storage.gke.io
    volumeHandle: ${google_compute_disk.gke_pv.id}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pv-claim
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---




apiVersion: apps/v1
kind: Deployment
metadata:
  name: container1-deployment
  labels:
    app: container1
spec:
  template:
    metadata:
      labels:
        app: container1
    spec:
      containers:
        - name: container1
#          image: us-central1-docker.pkg.dev/k8s-assignement/my-repository/container1:latest
          image: 9626492176/data-validator:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          volumeMounts:
            - mountPath: "/app/files"
              name: gke-storage
      volumes:
        - name: gke-storage
          persistentVolumeClaim:
            claimName: pv-claim
  replicas: 1
  selector:
    matchLabels:
      app: container1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: container2-deployment
  labels:
    app: container2
spec:
  template:
    metadata:
      labels:
        app: container2
    spec:
      containers:
        - name: container2
          #          image: us-central1-docker.pkg.dev/k8s-assignement/my-repository/container2:latest
          image: 9626492176/data-processor:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 6060
          volumeMounts:
            - mountPath: "/app/files"
              name: gke-storage
      volumes:
        - name: gke-storage
          persistentVolumeClaim:
            claimName: pv-claim
  replicas: 1
  selector:
    matchLabels:
      app: container2
---


apiVersion: v1
kind: Service
metadata:
  name: data-validator
spec:
  selector:
    app: container1
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30008
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: data-processor
spec:
  selector:
    app: container2
  ports:
    - port: 6060
      targetPort: 6060
  type: ClusterIP